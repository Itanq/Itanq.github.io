%YAML 1.2
---
name: Meson
file_extensions: [ meson.build, build, txt ]
scope: source.meson


variables:
  identifier_continue: '[[:alnum:]_]'
  identifier: '\b[[:alpha:]_]{{identifier_continue}}*\b'
  path: '({{identifier}} *\. *)*{{identifier}}'


contexts:
  main:
    - include: block-statements
    - include: expressions
    - include: assignments

  block-statements:
    # foreach item : list
    - match: \b(foreach)\b
      captures:
        1: keyword.control
      push:
        - meta_scope: meta.statement.for
        - include: line-continuation-or-pop
        - match: ':'
          scope: keyword.control
          set:
            - meta_scope: meta.statement.for
            - include: line-continuation-or-pop
            - include: expressions
        - include: target-list
    - match: \b(if|elif|else|endif|foreach|endforeach)\b
      scope: keyword.control

  assignments:
    - match: '='
      scope: keyword.operator.assignment

  expressions: # Always include this last!
    - include: comments
    - include: constants
    - include: numbers
    - include: operators
    - include: strings
    - include: function-calls
    - include: item-access
    - include: line-continuation
    - include: dotted-name
    - match: \(
      scope: punctuation.section.group.begin
      push:
        - meta_scope: meta.group
        - match: \)
          scope: punctuation.section.group.end
          pop: true
        - match: ','
          scope: punctuation.separator.tuple
        - include: expressions
    - match: \)
      scope: invalid.illegal.stray.brace.round
    - match: \]
      scope: invalid.illegal.stray.brace.square
    - match: \}
      scope: invalid.illegal.stray.brace.curly
    - include: lists
    - include: dictionaries-and-sets
    - match: '(\.) *(?={{identifier}})'
      captures:
        1: punctuation.accessor
      push:
        - include: illegal-names
        - include: generic-names
        - match: ''
          pop: true
    # For debugging
    # - match: \S
    #   scope: invalid.illegal.unmatched

  comments:
    - match: '#'
      scope: punctuation.definition.comment
      push:
        - meta_scope: comment.line
        - match: $
          pop: true

  constants:
    - match: \b(true|false|meson|build_machine|host_machine|target_machine|compiler)\b
      scope: constant.language.meson

  numbers:
    - match: '\b0[0-9]+'
      scope: invalid.illegal.numeric.integer
    - match: '\b([1-9]+[0-9]*|0)'
      scope: constant.numeric.integer
    # Match the version comparison too
    - match: ('(>|<|>=|<=|!=|==|=)?[0-9.]+')
      scope: constant.numeric.version.meson

  operators:
    - match: ==|!=|<=|>=|<|>|:|\?
      scope: keyword.operator.comparison
    - match: \+|\-|\*|\*\*|/|//|%|<<|>>|&|\||\^|~
      scope: keyword.operator.arithmetic
    - match: \b(and|in|is|not|or)\b
      scope: keyword.operator.logical

  function-calls:
    - match: '(?=\.?{{path}}\s*\()'
      push:
        - meta_scope: meta.function-call.meson
        - match: \)
          scope: punctuation.section.arguments.end.meson
          set: after-function-call-item-access
        - match: '(?=\.?{{path}}\s*\()'
          push:
            - match: (?=\s*\()
              pop: true
            - match: ' *(\.) *(?={{identifier}})'
              captures:
                1: punctuation.accessor.meson
              set:
                - include: dotted-name-specials
                - match: '{{identifier}}(?=\s*\()'
                  scope: variable.function.meson
                - include: generic-names
            - match: '(?={{identifier}})'
              push:
                - include: name-specials
                - match: '{{identifier}}(?=\s*\()'
                  scope: variable.function.meson
                - include: generic-names
        - match: \(
          scope: punctuation.section.arguments.begin.meson
          push:
            - meta_content_scope: meta.function-call.arguments.meson
            - match: (?=\))
              pop: true
            - include: keyword-arguments
            - match: ','
              scope: punctuation.separator.parameters.meson
            - include: expressions

  after-function-call-item-access:
    # A function returned by a function call or item access
    - match: '\s*(\()'
      captures:
        1: punctuation.section.arguments.begin.meson
      push:
        - meta_scope: meta.function-call.meson
        - meta_content_scope: meta.function-call.arguments.meson
        - match: \)
          scope: punctuation.section.arguments.end.meson
          pop: true
        - include: keyword-arguments
        - match: ','
          scope: punctuation.separator.parameters.meson
        - include: expressions
    # item access from a value returned from a function or item access
    - match: '\s*(\[)'
      captures:
        1: meta.item-access.meson punctuation.section.brackets.begin.meson
      push:
        - meta_content_scope: meta.item-access.arguments.meson
        - match: \]
          scope: meta.item-access.meson punctuation.section.brackets.end.meson
          pop: true
        - include: expressions
    - match: ''
      pop: true

  lists:
    - match: '(\[)(\s*(\]))\b'
      captures:
        1: punctuation.section.list.begin.meson
        2: meta.empty-list.meson
        3: punctuation.section.list.end.meson
    - match: \[
      scope: punctuation.section.list.begin.meson
      push:
        - meta_scope: meta.structure.list.meson
        - match: \]
          scope: punctuation.section.list.end.meson
          pop: true
        - match: ','
          scope: punctuation.separator.list.meson
        - include: expressions


  identifier-parts:
    - match: '{{identifier}} *(\.)'
      captures:
        1: punctuation.accessor.meson

  builtin-functions:
    - match: |-
        (?x)\b(
          __import__|all|abs|any|apply|ascii|bin|callable|chr|classmethod|cmp|coerce|
          compile|delattr|dir|divmod|enumerate|eval|exec|execfile|filter|format|getattr|
          globals|hasattr|hash|help|hex|id|input|intern|isinstance|issubclass|iter|
          len|locals|map|max|min|next|oct|open|ord|pow|print|property|range|
          raw_input|reduce|reload|repr|reversed|round|setattr|sorted|staticmethod|
          sum|super|type|unichr|vars|zip
        )\b
      scope: support.function


  name:
    - match: '(?={{identifier}})'
      push:
        - include: name-specials
        - include: generic-names
        - include: illegal-names

  name-specials:
    - match: '(?!{{identifier_continue}})'
      pop: true
    - include: builtin-functions

  dotted-name:
    - match: '(?={{path}})'
      push:
        - match: ' *(\.) *(?={{identifier}})'
          captures:
            1: punctuation.accessor.meson
          push:
            - include: dotted-name-specials
            - include: generic-names
        - match: '(?!{{identifier_continue}})'
          pop: true
        - include: name

  dotted-name-specials:
    - match: '(?!{{identifier_continue}})'
      pop: true
    - include: illegal-names

  generic-names:
    - match: "{{identifier}}"

  illegal-names:
    - match: \b(and|as|assert|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|not|or|pass|raise|return|try|while|with|yield)\b
      scope: invalid.illegal.name.meson

  keyword-arguments:
    - match: '(?={{identifier}}\s*:(?!=))'
      push:
        - include: line-continuation-or-pop
        - match: ':'
          scope: keyword.operator.assignment.meson
          set:
            - match: (?=\s*[,):])
              pop: true
            - include: expressions
        - include: illegal-names
        - match: '{{identifier}}'
          scope: variable.parameter.meson

  line-continuation:
    - match: (\\)(.*)$\n?
      captures:
        1: punctuation.separator.continuation.line.meson
        2: invalid.illegal.unexpected-text.meson
    # make sure to resume parsing at next line
      push:
        # This prevents strings after a continuation from being a docstring
        - include: strings
        - match: '(?=\S)'
          pop: true

  line-continuation-or-pop:
    - include: line-continuation
    - match: $|(?=;|#)
      pop: true

  line-continuation-inside-string:
    - match: (\\)$\n?
      captures:
        1: punctuation.separator.continuation.line

  strings:
    # Triple-quoted string
    - match: (''')
      captures:
        1: punctuation.definition.string.begin
      push:
        - meta_scope: string.quoted.block
        - match: '(?=\S)'
          set:
            - meta_scope: string.quoted.block.meson
            - match: "'''"
              scope: punctuation.definition.string.end.meson
              pop: true
            - include: escaped-char
            - include: string-placeholder
    # Single-line string
    - match: '('')'
      captures:
        1: punctuation.definition.string.begin
      push:
        - meta_scope: string.quoted
        - match: '('')|(\n)'
          captures:
            1: punctuation.definition.string.end
            2: invalid.illegal.unclosed-string
          pop: true
        - include: escaped-char
        - include: string-placeholder
        - include: line-continuation-inside-string

  escaped-char:
    - match: '(\\[\\''abfnrtv])'
      captures:
        1: constant.character.escape.meson

  string-placeholder:
    - match: '@[0-9]*@'
      scope: constant.other.placeholder.meson


  target-list:
    - include: line-continuation-or-pop
    - match: ','
      scope: punctuation.separator.target-list.meson
    - match: \(
      push:
        - include: comments
        - match: ','
          scope: punctuation.separator.target-list.meson
        - match: \)
          pop: true
        - include: name
    - include: name


